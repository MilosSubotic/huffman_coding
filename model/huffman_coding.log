Setting text for decoding.
TEXT: babadeda
in_data:
 6
 2
 6
 1
 6
 2
 6
 1
 6
 4
 6
 5
 6
 4
 6
 1


Histogram.
histogram:
 0:  0
 1:  3
 2:  2
 3:  0
 4:  2
 5:  1
 6:  8
 7:  0
 8:  0
 9:  0
10:  0
11:  0
12:  0
13:  0
14:  0
15:  0


Sorting.
sort_vec:
 0:  0
 3:  0
 7:  0
 8:  0
 9:  0
10:  0
11:  0
12:  0
13:  0
14:  0
15:  0
 5:  1
 2:  2
 4:  2
 1:  3
 6:  8


Remove empty leaves.
leaves:
 5:  1
 2:  2
 4:  2
 1:  3
 6:  8
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31


Quasi-tree.
iter 0:
leaves:
 4:  2
 1:  3
 6:  8
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
parents:
16:  3
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
parents_end: 1
depth_tracker:
 0:  0
 1:  0
16:  1
 3:  0
 4:  0
16:  1
 6:  0
 7:  0
 8:  0
 9:  0
10:  0
11:  0
12:  0
13:  0
14:  0
15:  0

iter 1:
leaves:
 1:  3
 6:  8
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
parents:
17:  5
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
parents_end: 1
depth_tracker:
 0:  0
 1:  0
17:  2
 3:  0
17:  1
17:  2
 6:  0
 7:  0
 8:  0
 9:  0
10:  0
11:  0
12:  0
13:  0
14:  0
15:  0

iter 2:
leaves:
 6:  8
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
parents:
18:  8
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
parents_end: 1
depth_tracker:
 0:  0
18:  1
18:  3
 3:  0
18:  2
18:  3
 6:  0
 7:  0
 8:  0
 9:  0
10:  0
11:  0
12:  0
13:  0
14:  0
15:  0

iter 3:
leaves:
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
parents:
19: 16
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
31: 31
parents_end: 1
depth_tracker:
 0:  0
19:  2
19:  4
 3:  0
19:  3
19:  4
19:  1
 7:  0
 8:  0
 9:  0
10:  0
11:  0
12:  0
13:  0
14:  0
15:  0



symbols_depth:
 0:  0
 1:  2
 2:  4
 3:  0
 4:  3
 5:  4
 6:  1
 7:  0
 8:  0
 9:  0
10:  0
11:  0
12:  0
13:  0
14:  0
15:  0


Count same depths
depths_count:
 0: 11
 1:  1
 2:  1
 3:  1
 4:  2


Calculate start codes for depths.
start_codes:
 0: 
 1: 0
 2: 10
 3: 110
 4: 1110


Creating canonical code table.
code_lens:
 0: 0
 1: 2
 2: 4
 3: 0
 4: 3
 5: 4
 6: 1
 7: 0
 8: 0
 9: 0
10: 0
11: 0
12: 0
13: 0
14: 0
15: 0
code_table:
 0: 
 1: 10
 2: 1110
 3: 
 4: 110
 5: 1111
 6: 0
 7: 
 8: 
 9: 
10: 
11: 
12: 
13: 
14: 
15: 


Mirror codes for little endian encoding.
code_table:
 0:      
 1:    01
 2:  0111
 3:      
 4:   011
 5:  1111
 6:     0
 7:      
 8:      
 9:      
10:      
11:      
12:      
13:      
14:      
15:      


Encode data.
Encoding:
iter 0:
sym:  6
code:     0
enc_data:                                                                0
enc_len: 1

iter 1:
sym:  2
code:  0111
enc_data:                                                            01110
enc_len: 5

iter 2:
sym:  6
code:     0
enc_data:                                                           001110
enc_len: 6

iter 3:
sym:  1
code:    01
enc_data:                                                         01001110
enc_len: 8

iter 4:
sym:  6
code:     0
enc_data:                                                        001001110
enc_len: 9

iter 5:
sym:  2
code:  0111
enc_data:                                                    0111001001110
enc_len: 13

iter 6:
sym:  6
code:     0
enc_data:                                                   00111001001110
enc_len: 14

iter 7:
sym:  1
code:    01
enc_data:                                                 0100111001001110
enc_len: 16

iter 8:
sym:  6
code:     0
enc_data:                                                00100111001001110
enc_len: 17

iter 9:
sym:  4
code:   011
enc_data:                                             01100100111001001110
enc_len: 20

iter 10:
sym:  6
code:     0
enc_data:                                            001100100111001001110
enc_len: 21

iter 11:
sym:  5
code:  1111
enc_data:                                        1111001100100111001001110
enc_len: 25

iter 12:
sym:  6
code:     0
enc_data:                                       01111001100100111001001110
enc_len: 26

iter 13:
sym:  4
code:   011
enc_data:                                    01101111001100100111001001110
enc_len: 29

iter 14:
sym:  6
code:     0
enc_data:                                   001101111001100100111001001110
enc_len: 30

iter 15:
sym:  1
code:    01
enc_data:                                 01001101111001100100111001001110
enc_len: 32

enc_data:                                 01001101111001100100111001001110
enc_len: 32


Decode data.
bitset<64>(enc_data) = 0000000000000000000000000000000001001101111001100100111001001110
iter 0:
best_len:  1
best_code:     0
best_sym:  6
enc_data:                                  0100110111100110010011100100111
enc_len: 31

bitset<64>(enc_data) = 0000000000000000000000000000000000100110111100110010011100100111
iter 1:
best_len:  4
best_code:  0000
best_sym:  2
enc_data:                                      010011011110011001001110010
enc_len: 27

bitset<64>(enc_data) = 0000000000000000000000000000000000000010011011110011001001110010
iter 2:
best_len:  1
best_code:     0
best_sym:  6
enc_data:                                       01001101111001100100111001
enc_len: 26

bitset<64>(enc_data) = 0000000000000000000000000000000000000001001101111001100100111001
iter 3:
best_len:  2
best_code:    00
best_sym:  1
enc_data:                                         010011011110011001001110
enc_len: 24

bitset<64>(enc_data) = 0000000000000000000000000000000000000000010011011110011001001110
iter 4:
best_len:  1
best_code:     0
best_sym:  6
enc_data:                                          01001101111001100100111
enc_len: 23

bitset<64>(enc_data) = 0000000000000000000000000000000000000000001001101111001100100111
iter 5:
best_len:  4
best_code:  0000
best_sym:  2
enc_data:                                              0100110111100110010
enc_len: 19

bitset<64>(enc_data) = 0000000000000000000000000000000000000000000000100110111100110010
iter 6:
best_len:  1
best_code:     0
best_sym:  6
enc_data:                                               010011011110011001
enc_len: 18

bitset<64>(enc_data) = 0000000000000000000000000000000000000000000000010011011110011001
iter 7:
best_len:  2
best_code:    00
best_sym:  1
enc_data:                                                 0100110111100110
enc_len: 16

bitset<64>(enc_data) = 0000000000000000000000000000000000000000000000000100110111100110
iter 8:
best_len:  1
best_code:     0
best_sym:  6
enc_data:                                                  010011011110011
enc_len: 15

bitset<64>(enc_data) = 0000000000000000000000000000000000000000000000000010011011110011
iter 9:
best_len:  3
best_code:   000
best_sym:  4
enc_data:                                                     010011011110
enc_len: 12

bitset<64>(enc_data) = 0000000000000000000000000000000000000000000000000000010011011110
iter 10:
best_len:  1
best_code:     0
best_sym:  6
enc_data:                                                      01001101111
enc_len: 11

bitset<64>(enc_data) = 0000000000000000000000000000000000000000000000000000001001101111
iter 11:
best_len:  4
best_code:  0000
best_sym:  5
enc_data:                                                          0100110
enc_len: 7

bitset<64>(enc_data) = 0000000000000000000000000000000000000000000000000000000000100110
iter 12:
best_len:  1
best_code:     0
best_sym:  6
enc_data:                                                           010011
enc_len: 6

bitset<64>(enc_data) = 0000000000000000000000000000000000000000000000000000000000010011
iter 13:
best_len:  3
best_code:   000
best_sym:  4
enc_data:                                                              010
enc_len: 3

bitset<64>(enc_data) = 0000000000000000000000000000000000000000000000000000000000000010
iter 14:
best_len:  1
best_code:     0
best_sym:  6
enc_data:                                                               01
enc_len: 2

bitset<64>(enc_data) = 0000000000000000000000000000000000000000000000000000000000000001
iter 15:
best_len:  2
best_code:    00
best_sym:  1
enc_data:                                                                 
enc_len: 0

out_data:
 6
 2
 6
 1
 6
 2
 6
 1
 6
 4
 6
 5
 6
 4
 6
 1


Comparing input and output.


End.
